-- 1. Tabla temporal para carga del CSV
CREATE TABLE TEMP_GLOBAL_HEALTH (
    country_name              VARCHAR2(150),
    year                      NUMBER(4),
    per_capita_income         NUMBER(10,2),
    education_index           NUMBER(3,2),
    urbanization_rate         NUMBER(5,2),
    healthcare_access         NUMBER(5,2),
    doctor_per_1000           NUMBER(4,2),
    hospital_beds_per_1000    NUMBER(4,2),
    disease_category_name     VARCHAR2(100),
    disease_name              VARCHAR2(150),
    treatment_type            VARCHAR2(100),
    avg_treatment_cost        NUMBER(10,2),
    vacciness_disponibility   CHAR(1),
    age_group                 VARCHAR2(20),
    gender                    VARCHAR2(10),
    prevalence_rate           NUMBER(10,2),
    incidence_rate            NUMBER(10,2),
    mortality_rate            NUMBER(10,2),
    population_affected       NUMBER(10),
    recovery_rate             NUMBER(10,2),
    dalys                     NUMBER(8),
    five_year_improvement     NUMBER(5,2)
) TABLESPACE ts_datos;

-- 2. Tabla de control de cargas
CREATE TABLE LOAD_CONTROL (
    control_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre_tabla    VARCHAR2(30),
    filas_afectadas NUMBER,
    operacion       VARCHAR2(10),
    fecha_proceso   DATE,
    usuario_proceso VARCHAR2(30),
    CONSTRAINT pk_load_control PRIMARY KEY (control_id)
) TABLESPACE ts_datos;

-- 3. Secuencias para claves primarias (opcional)
CREATE SEQUENCE seq_disease_cat START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_treatment    START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_disease      START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_country_stat START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_health_stat  START WITH 1 INCREMENT BY 1 NOCACHE;

-- 4. Procedimiento de carga para DISEASE_CATEGORY
CREATE OR REPLACE PROCEDURE load_disease_category(
    p_load_date IN DATE,
    p_user      IN VARCHAR2
) IS
    v_rows NUMBER;
BEGIN
    -- Inserta categorías únicas desde la temporal
    INSERT /*+ APPEND */ INTO DISEASE_CATEGORY(disease_category_id, disease_category_name)
    SELECT seq_disease_cat.NEXTVAL, DISTINCT(t.disease_category_name)
      FROM TEMP_GLOBAL_HEALTH t
    WHERE NOT EXISTS (
      SELECT 1 FROM DISEASE_CATEGORY dc
       WHERE dc.disease_category_name = t.disease_category_name
    );
    v_rows := SQL%ROWCOUNT;

    -- Registrar en control
    INSERT INTO LOAD_CONTROL
    (nombre_tabla, filas_afectadas, operacion, fecha_proceso, usuario_proceso)
    VALUES('DISEASE_CATEGORY', v_rows, 'INSERT', p_load_date, p_user);

    COMMIT;
END load_disease_category;
/

-- 5. Procedimiento de carga para DISEASE_TREATMENT
CREATE OR REPLACE PROCEDURE load_disease_treatment(
    p_load_date IN DATE,
    p_user      IN VARCHAR2
) IS
    v_rows NUMBER;
BEGIN
    INSERT /*+ APPEND */ INTO DISEASE_TREATMENT(disease_T_id, treatment_type, avg_treatment_cost, vacciness_disponibility)
    SELECT seq_treatment.NEXTVAL,
           t.treatment_type,
           t.avg_treatment_cost,
           t.vacciness_disponibility
      FROM TEMP_GLOBAL_HEALTH t
    WHERE NOT EXISTS (
      SELECT 1 FROM DISEASE_TREATMENT dt
       WHERE dt.treatment_type = t.treatment_type
    );
    v_rows := SQL%ROWCOUNT;

    INSERT INTO LOAD_CONTROL
    VALUES('DISEASE_TREATMENT', v_rows, 'INSERT', p_load_date, p_user);

    COMMIT;
END load_disease_treatment;
/

-- 6. Procedimiento de carga para DISEASE
CREATE OR REPLACE PROCEDURE load_disease(
    p_load_date IN DATE,
    p_user      IN VARCHAR2
) IS
    v_rows NUMBER;
BEGIN
    INSERT /*+ APPEND */ INTO DISEASE(disease_id, disease_category_id, disease_T_id, disease_name)
    SELECT seq_disease.NEXTVAL,
           dc.disease_category_id,
           dt.disease_T_id,
           t.disease_name
      FROM TEMP_GLOBAL_HEALTH t
      JOIN DISEASE_CATEGORY dc ON dc.disease_category_name = t.disease_category_name
      JOIN DISEASE_TREATMENT dt ON dt.treatment_type = t.treatment_type
    WHERE NOT EXISTS (
      SELECT 1 FROM DISEASE d
       WHERE d.disease_name = t.disease_name
    );
    v_rows := SQL%ROWCOUNT;

    INSERT INTO LOAD_CONTROL
    VALUES('DISEASE', v_rows, 'INSERT', p_load_date, p_user);

    COMMIT;
END load_disease;
/

-- 7. Procedimiento de carga para COUNTRIES_STATS
CREATE OR REPLACE PROCEDURE load_countries_stats(
    p_load_date IN DATE,
    p_user      IN VARCHAR2
) IS
    v_rows NUMBER;
BEGIN
    INSERT /*+ APPEND */ INTO COUNTRIES_STATS(
      countries_stats_id, country_name, year,
      per_capita_income, education_index,
      urbanization_rate, healthcare_access,
      doctor_per_1000, hospital_beds_per_1000
    )
    SELECT seq_country_stat.NEXTVAL,
           t.country_name,
           t.year,
           t.per_capita_income,
           t.education_index,
           t.urbanization_rate,
           t.healthcare_access,
           t.doctor_per_1000,
           t.hospital_beds_per_1000
      FROM TEMP_GLOBAL_HEALTH t;
    v_rows := SQL%ROWCOUNT;

    INSERT INTO LOAD_CONTROL
    VALUES('COUNTRIES_STATS', v_rows, 'INSERT', p_load_date, p_user);

    COMMIT;
END load_countries_stats;
/

-- 8. Procedimiento de carga para HEALTH_STATS
CREATE OR REPLACE PROCEDURE load_health_stats(
    p_load_date IN DATE,
    p_user      IN VARCHAR2
) IS
    v_rows NUMBER;
BEGIN
    INSERT /*+ APPEND */ INTO HEALTH_STATS(
      health_stats_id, age_group, gender,
      prevalence_rate, incidence_rate,
      mortality_rate, population_affected,
      recovery_rate, dalys,
      five_year_improvement,
      countries_stats_id, disease_id
    )
    SELECT seq_health_stat.NEXTVAL,
           t.age_group,
           t.gender,
           t.prevalence_rate,
           t.incidence_rate,
           t.mortality_rate,
           t.population_affected,
           t.recovery_rate,
           t.dalys,
           t.five_year_improvement,
           cs.countries_stats_id,
           d.disease_id
      FROM TEMP_GLOBAL_HEALTH t
      JOIN COUNTRIES_STATS cs
        ON cs.country_name = t.country_name
       AND cs.year = t.year
      JOIN DISEASE d
        ON d.disease_name = t.disease_name;
    v_rows := SQL%ROWCOUNT;

    INSERT INTO LOAD_CONTROL
    VALUES('HEALTH_STATS', v_rows, 'INSERT', p_load_date, p_user);

    COMMIT;
END load_health_stats;
/

-- 9. Procedimiento de limpieza general (truncate)
CREATE OR REPLACE PROCEDURE purge_all_data IS
BEGIN
  EXECUTE IMMEDIATE 'TRUNCATE TABLE HEALTH_STATS';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE COUNTRIES_STATS';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE DISEASE';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE DISEASE_TREATMENT';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE DISEASE_CATEGORY';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE LOAD_CONTROL';
  COMMIT;
END purge_all_data;
/